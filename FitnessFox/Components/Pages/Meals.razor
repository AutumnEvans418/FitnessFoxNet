@page "/meals"
@using FitnessFox.Data.Foods
@using FitnessFox.Data.Goals

@attribute [Authorize]
@inject ApplicationDbContext dbContext
@inject AuthenticationStateProvider stateProvider
@inject ISnackbar Snackbar
<MudGrid>
    <MudItem xs="12" sm="12" md="12">
        <MudPaper Elevation="2" Class="pa-4" Style="height: 100px;">
            <MudText Typo="Typo.h6">Current Date</MudText>
            <MudStack Row=true>
                <MudIconButton OnClick="() => SetDate(CurrentDate?.AddDays(-1))" Icon="@Icons.Material.Filled.ArrowLeft"></MudIconButton>
                <MudDatePicker @bind-Date="CurrentDate" @bind-Date:after="Refresh"></MudDatePicker>
                <MudIconButton OnClick="() => SetDate(CurrentDate?.AddDays(1))" Icon="@Icons.Material.Filled.ArrowRight"></MudIconButton>
            </MudStack>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" sm="6" md="4">
        <MudPaper Elevation="2" Class="pa-4">
            @{
                var goal = Goals.FirstOrDefault(g => g.Type == UserGoalType.Calories);
            }

            <MudProgressCircular Style="height: 100px; width: 100px" Color="Color.Primary" Value="@UserMeals.Sum(s => s.Calories)" Max="goal?.Value ?? 2000">
                <ChildContent>
                    <MudStack Spacing="0" AlignItems="AlignItems.Center" Justify="Justify.Center">
                        <MudText Typo="Typo.subtitle2">Calories</MudText>
                        <MudText Typo="Typo.subtitle2">@UserMeals.Sum(s => s.Calories)/@(@goal?.Value ?? 2000)</MudText>
                    </MudStack>
                </ChildContent>
            </MudProgressCircular>

        </MudPaper>
    </MudItem>

    <MudItem xs="12" sm="12" md="12">
        <MudPaper Elevation="2" Class="pa-4">
            <MudText Typo="Typo.h4">Meals</MudText>
            <MudGrid>
                @foreach (UserMealType item in Enum.GetValues(typeof(UserMealType)))
                {
                    <MudItem Class="m-2">
                        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Add" OnClick="() => Add(item)">@item</MudButton>
                    </MudItem>
                }

                <MudItem Class="m-2">
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Add" Href="/foods/add">New Food</MudButton>

                </MudItem>
            </MudGrid>
            <MudTable Items="UserMeals" RowEditCommit="i => Update(i as UserMeal)" CanCancelEdit=true>
            
                <HeaderContent>
                    <MudTh>Type</MudTh>
                    <MudTh>Meal</MudTh>
                    <MudTh>Servings</MudTh>
                    <MudTh>Calories</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Type</MudTd>
                    <MudTd>@context.MealItem</MudTd>
                    <MudTd>@context.Servings (@context.ServingUnitDisplay)</MudTd>
                    <MudTd>@context.Calories</MudTd>
                </RowTemplate>
                <RowEditingTemplate>
                    <MudTd>
                        <MudSelect T="UserMealType" @bind-Value="context.Type">
                            @foreach (UserMealType item in Enum.GetValues(typeof(UserMealType)))
                            {
                                <MudSelectItem T="UserMealType" Value="@item">@item</MudSelectItem>
                            }
                        </MudSelect>
                    </MudTd>
                    <MudTd>
                        <MudAutocomplete T="Nutrients"
                                         @bind-Value="@context.MealItem"
                                         SearchFunc="Search"
                                         Variant="Variant.Outlined"
                                         Label="Meal"
                                         Clearable></MudAutocomplete>
                        <MudIconButton Color="Color.Primary" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Edit" Href="@($"/foods/{@context.FoodId}")"></MudIconButton>

                    </MudTd>
                    <MudTd>
                        <MudNumericField T="float"
                                      @bind-Value="context.Servings"
                                      Label="Servings"></MudNumericField> (@context.ServingUnitDisplay)
                    </MudTd>
                </RowEditingTemplate>
            </MudTable>
        </MudPaper>
    </MudItem>
</MudGrid>
@code {
    public DateTime? CurrentDate { get; set; } = DateTime.Now;
    public ApplicationUser User { get; set; } = new();
    public List<UserMeal> UserMeals { get; set; } = new();
    public List<UserGoal> Goals { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    public async Task Refresh()
    {
        var user = await stateProvider.GetAuthenticationStateAsync();

        var userId = user.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (userId == null)
            return;

        User = await dbContext.Users.FirstAsync(u => u.Id == userId);

        var currentDate = CurrentDate.GetValueOrDefault().Date;

        Goals = await dbContext.UserGoals.Where(u => u.UserId == userId).ToListAsync();

        UserMeals = await dbContext
            .UserMeals
            .Where(u => u.UserId == userId && u.DateCreated.Date == currentDate)
            .Include(u => u.Food)
            .Include(u => u.Recipe)
            .OrderBy(p => p.Type)
            .ToListAsync();

        StateHasChanged();
    }

    public async Task SetDate(DateTime? date)
    {
        CurrentDate = date;
        await Refresh();
    }

    public void Add(UserMealType type)
    {
        var meal = new UserMeal
        {
            DateCreated = CurrentDate.GetValueOrDefault(),
            UserId = User.Id,
            Type = type,
        };
        UserMeals.Add(meal);
        StateHasChanged();
    }
    private async Task<IEnumerable<Nutrients>> Search(string value, CancellationToken token)
    {
        var foods = dbContext.Foods.OrderBy(f => f.BrandRestaurant).AsQueryable();
        var recipes = dbContext.Recipes.OrderBy(f => f.Name).AsQueryable();

        if (!string.IsNullOrWhiteSpace(value))
        {
            foods = foods.Where(f => f.BrandRestaurant.Contains(value) || f.Description.Contains(value));
            recipes = recipes.Where(f => f.Name.Contains(value));
        }

        var foodsList = await foods.Take(20).ToListAsync();
        var recipesList = await recipes.Take(20).ToListAsync();

        return foodsList
            .Cast<Nutrients>()
            .Union(recipesList)
            .OrderBy(n =>
            {
                if (n is Food f)
                    return f.Name;
                if (n is Recipe r)
                    return r.Name;
                throw new NotImplementedException();
            }).ToList();
    }

    public async Task Update(UserMeal meal)
    {
        meal.SetNutrients();

        dbContext.Update(meal);
        await dbContext.SaveChangesAsync();

        StateHasChanged();
    }
}
