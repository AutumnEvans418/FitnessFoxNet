@page "/goals"

@attribute [Authorize]
@inject ApplicationDbContext dbContext
@inject AuthenticationStateProvider stateProvider
@inject ISnackbar Snackbar
<h3>Goals</h3>

<MudGrid>
    @foreach (var goal in UserGoals)
    {
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Style="padding: 10px" >
                @{
                    var name = goal.Type.GetAttribute<DisplayAttribute>();
                }
                <MudNumericField T="float" @bind-Value="goal.Value" @bind-Value:after="() => Save(goal)" Label="@name?.Name"></MudNumericField>
            </MudPaper>
        </MudItem>
    }
</MudGrid>


@code {
    public List<UserGoalType> GoalTypes { get; set; } = Enum.GetValues<UserGoalType>().ToList();

    public List<UserGoal> UserGoals { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await Refresh();
    }

    public async Task Refresh()
    {
        UserGoals.Clear();
        var user = await stateProvider.GetAuthenticationStateAsync();

        var userId = user.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (userId == null)
            return;

        var goals = await dbContext.UserGoals.Where(u => u.UserId == userId).ToListAsync();

        foreach (var type in GoalTypes)
        {
            var goal = goals.FirstOrDefault(u => u.Type == type) ?? new()
            {
                Type = type,
                UserId = userId,
            };
            UserGoals.Add(goal);
        }

        StateHasChanged();
    }

    public async Task Save(UserGoal goal)
    {


        dbContext.Update(goal);
        await dbContext.SaveChangesAsync();
        Snackbar.Add("Saved!");
        await Refresh();
    }
}
